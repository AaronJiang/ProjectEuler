"""

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n^2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n-1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n-1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n-3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n-2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of 
the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), 
is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal
type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented 
by a different number in the set.
"""

from Helper import *
import sys

def isCyclic(numbers):
    seperates = []
    for i in numbers:
        # no repeat number
        if numbers.count(i) > 1:
            return False 
        seperates.append(str(i)[:2])
        seperates.append(str(i)[2:])

    for i in seperates:
        # cyclic digits must occur in double
        if seperates.count(i) % 2 != 0:
            return False 
    return True        

triangles = [i for i in range(1000, 2000) if isTriangle(i)]
squares = [i for i in range(1000, 2000) if isSquare(i)]
pentagonals = [i for i in range(1000, 2000) if isPentagonal(i)]
hexagonals = [i for i in range(1000, 2000) if isHexagonal(i)]
heptagonals = [i for i in range(1000, 2000) if isHeptagonal(i)]
octagonals = [i for i in range(1000, 2000) if isOctagonal(i)]

print len(triangles), len(squares), len(pentagonals), len(hexagonals), len(heptagonals), len(octagonals)

for triangle in triangles:
    for square in squares:
        for pentagonal in pentagonals:
            for hexagonal in hexagonals:
                for heptagonal in heptagonals:
                    for octagonal in octagonals:
                        numbers = [triangle, square, pentagonal, \
                        hexagonal, heptagonal, octagonal]
                        if isCyclic(numbers): 
                            print numbers
                            sys.exit(0)
# def fn(n):
#   return (3,n*(n+1)/2), (4,n*n), (5,n*(3*n-1)/2), (6,n*(2*n-1)), (7,n*(5*n-3)/2), (8,n*(3*n-2))
 
# def next(types, data):
#   if len(types)==6 and data[0]//100 == data[-1]%100:
#     print data, sum(data)
#   else:
#     for t, n in ds.get((types[-1], data[-1]), []):
#       if t not in types:
#         next(types+[t], data+[n])
 
# p = []          #build a list of polygonal numbers with their type (type, pnum)
# n = 19          #first n for octogonal number > 999
 
# while n<141:    #last n for triangle numbers < 10000
#   for type, data in fn(n):
#     if 1000 <= data <= 9999 and data%100 > 9:
#       p.append( (type, data) ) 
#   n+=1
 
# ds = {}         # build a dictionary of tuples
# for t1, d1 in p:
#   for t2, d2 in p:
#     if t1 != t2 and d1%100 == d2//100:
#       ds[t1, d1] = ds.get((t1, d1),[]) + [(t2, d2)] 
 
# for type, data in ds: next([type],[data])